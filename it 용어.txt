#통합 개발 환경 Intergrated Development Envieonment
공통된 개발자 툴을 하나의 그래픽 사용자 인터페이스로 결합하는 애플리케이션을 구축하기 위한 소프트웨어


#변수(Varriable)
연산을 수행할 데이터를 저장할 기억장소
연산을 수행할 데이터를 기억장소에 저장할때, 개발자가 직접 위치를 지정함	


#Java 언어의 특징
1.완전한 객체지향 언어이다.
2.운영체제 독립적이다. = 한번만 만들어 놓으면 여기저기 써먹을수 있다
:Java 가상머신
-컴퓨터 운영체제 위에서 새로운 컴퓨터가 있는것처럼 작동되는 환경. 
-소프트웨어 만으로 만들어진 컴퓨터 프로그램
-JVM(Java Virtual Machine)만 있으면 한번의 코딩으로 운영체제 관계없이 어플리케이션 실행가능
3.비교적 배우기 쉽다.
4.자동메모리 관리(Gabage Collection)가 된다. = 사용하지 않는 메모리 자동으로 지워줌
5.네트워크와 분산처리를 지원한다.
6.멀티 쓰레드를 지원한다.
7.동적 로딩(Dynamic Laoding)을 지원한다.


#객체지향 프로그래밍이란? (Object Oriented Programming)=oop
-프로그램의 생명주기론에서 탄생한 개념
-프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들간의
유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방벙

객체 지향 프로그래밍
장점 -코드 재사용이 용이, 유지보수가 쉬움, 대형프로젝트에 적합
단점 -처리속도가 상대적으로 느림, 객체가 많으면 용량이 커짐, 설계시 많은시간과 노력 필요

팀프로젝트를 시작할때
클래스 이름, 변수 이름등을 미리 지정해놓고 시작한다. 코드공유등의 문제 최소화


프로그래머, 개발자( Programmer, Developer)
-코드작성, 분석 및 구현, 디버깅, 컴파일, 테스트 및 구현을 동해 원하는 출력물을 만들어 내는 일
-시스템이 제대로 작동되기 위한 모든 다양한 요소들 다룰 수 있는 영역
-다양한 유형의 복잡한 시나리오와 프로그램을 다룬다.
-문제에 대한 솔루션을 개념화 하고 분석한 다음 문제 해결 방법을 결정.
-사소한 문제로 인해 발생할 수 있는 것들을 발견하고 예방한다.
-코드분석, 패턴 디자인 등을 연구하고 습득 향상 시킨다.


Method: 메소드, 메서드, 함수(fnuction)
-JDk에서 지원하지 않는 여러 명령문을 그룹으로 묶어 새로운 명령어 처럼 사용한다.
-method를 사용 하려면 먼저 method가정의 되어야 한다.
-method의 실행 결과를 다른 변수에 저장 할 수 있다.


JDk(Java Development Kit)
-Java 언어를 base로 하여 Application을 개발하는 활용할 수 있는 미리 준비된 class, method들의 모음
-마치 모형 kit를 조립하는 것처럼, 아이디어를 현실화 할 수 있는 매우 다양한 기능이 있다.
-JDK 도구만 잘 활용하여도 아이디어를 Application으로 충분히 구현가능
-JDk 11 기준 14,500여개는 소스코드도 공개되어 있다.

객체지향 프로그래밍(OOP)
-컴퓨터 프로그래밍 패러다임의 한가지
-프로그래밍에서 필요한 데이터를 추상화 하고 상태와 행위를 가진 객체를 만들고 그 객체들간의
유기적인 상호 작용을 통해 문제를 해결하는 프로그래밍 방법


오류(Error)
-코딩 문법오류로 인한 컴파일 시 오류와 런타임(실행)시 널 포인트 참조와 같은 오류로 심각한 문제를 야기 시켜 프로세스가 종료되거나 중단된다.
-시스템 에러는 컴퓨터 하드웨어의 오동작 또는 고장으로 인해 응용 프로그램에 이상이 생겼거나 JVM 실행에 문제가 생겼을때 발생하는 것
-코딩 문법 오류가 아닌경우 개발자가 미리 예측하여 처리할 수 없는 경우가 많아 애플리케이션에서 오류에 대한 처리를 할수 없는 경우가 많다.
-오류가 발생하는 상황을 미리 예측하여 Exception처럼 핸들링 할 수도 있다.

Exception <예외상황> 
-오류와 같이 응용프로그램, 프로세스를 종료시키는 것은 유사하다.
-오류와 달리 개발자가 예측할 수 있고 적절한 처리(Exception Handling)를 수행하여 최소한 응용프로그램, 프로세스 종료를 방지할 수 있다.

Exception Handling = 예기치않은 값으로 데이터 손실을 방지하기 위해 사용자의 행동을 제한하여 값을 입력받게끔


객체지향
클래스 class 
-일반적인 코드 개념에서 모듈에 해당하며 코드를 파일로 분리하여 작성하는 것
-객체지향 프로그래밍 언어인 자바에서는 연관되어 있는 메서드, 변수들을 모아 놓은 집합으로 객체를 만들기 위한 설계도 역할 수행

객체 object
-객체지향 프로그래밍에서 실제로 구현 해야할 대상
-클래스를 사용하여 선언된 변수 상태

인스턴스 instance
-클래스를 바탕으로 선언된 object를 메모리에 탑재하고 사용 가능한 상태가 되는 구체적인 실체
-인스턴스는 객체에 포함되는 개념이지만, 객체는 아직 사용할 준비가 덜 된 상태이고, 인스턴스가 되었을때
객체의 매서드 등을 호출하여 실행할 수 있다.



소스코드(Source Code)
-Text type의 *.java파일 
-메모장 등으로 내용을 읽을 수 있다. 영어문장과 유사한 문법으로 작성한다.

이진 기계어 코드(Binary Machine Code)
-컴퓨터의 CPU가 해석할 수 있는 이진수 모음으로 만들어진 코드
-소스코드를 '컴파일'과정을 거쳐 생성된다.
-*.java 코드를 컴파일하면 *.Class 파일이 생성되며 코드가 저장된다.

Application실행
-이진 기계어 코드를 컴퓨터의 주 기억장치에 올리고 순서내도 CPU를 보내어 명령을 실행하고 연산을 수행
-연산 결과는 console에 출력된다.


모듈(Module)
-파일,폴더 단위로 코드 조각들을 모아서 프로그래밍을 한다. 이 코드 조각들을 패키징하여 하나의 프로젝트를 구현한다.
-코드 조각들을 모은 파일, 폴더 단위를 모듈이라 한다.
-프로그래밍 언어마다 구현방식이 다르다.
-모듈을 모아서 최종 프로젝트를 완성하는데 이것을 "build"라고 한다. 

자바의 클래스
-자바는 모듈을"클래스 파일(*java.)"로 생성한다.
-클래스 파일은 "패키지(package,폴더)" 단위로 묶는다.
-클래스 파일에는 "메서드(Method)"를 구현한다.
-자바의 클래스 파일(모듈)은 다른 언어와 달리 "변수(데이터)"도 함께 포함 할 수 있다.
-메서드와 변수 묶음 > 클래스 묶음 > 패키지 묶음 > 프로젝트 Build > Application 

Man Machine Interface 
사람과 pc간의 연결통로



method
-프로그래밍언어네서 공ㅌ총으로 function, 함수라고 부른다.
-자바에서는 항상 class{} 블럭 내부에 선언되므로 축소적 의미로 method 라고 한다.

자바의 중요 method
public static void main(String[] args){}
진입점, 시작점 method 이며, 자바 코드를 Run 했을때
jvm에 의해 제일 먼저 호출되는 method이다.
public ServiceV1(){}
생성자 method이며, 클래스를 선언하면 자동으로 선언된다.
ServiceV1 serviceV1 = new ServiceV1() 처럼
클래스를 사용하여 인스턴스를 생성할 때 호출한다.
클래스 영역의 변수들을 초기화 하는 코드를 포함한다.



코딩언어에서 pointer는 기억장소의 위치를 말한다.



변수(Varriable)
-연산을 수행할 데이터를 저장할 기억장소
-연산을 수행할 데이터를 기억장소에 저장할때, 개발자가 저장 위치에 붙임이름, 별명

인스턴스(Instance)
-클래스를 사용하여 선언한 객체(Object)이며, new키워드와 생성자를 통해 초기화된 상태
-변수의 명명규칙과 동일한 방식으로 이름 부여
-클래스에 선언된 method를 호출하거나 클래스 변수(속성)에 접근(읽고, 쓰기)할때 연결하는 통로 역할 수행


-return 타입이 정수형(int)인 sum method 선언문
public int sum(){
	return = 0;
}

-void type인 print method 선언문
public void print(){
	
}

클래스를 사용하여 객치를 선언하고 생성자를 사용하여 초기화하였다. => 인스턴스 생성
Exec00 exec00 = new Exec00();

void 타입의 print method는 앞에 변수가 올 수 없다
exec00.print();

return type이 정수형인 sum method()는 결과를 변수에 저장할 수 있다.



변수 scope
-변수, 인스턴스, 메서드 등은 선언된 위치, 접근 제한자 성정에 따라 외부에서 접근하는 방식이 다른다





클래스, 변수, 매서드 및 속성 이름 작명 코딩 패턴: 이름 작성 Case패턴
- 표준 Camel Case: myName
- Upper Camel Case : ServiceV1,ScoreService, StudentService
- Kebab Case : my-name, ham-button, top-menu
- 헝가리언 표기법 : intKor, strNation, bYes
- Snack Case(Underscore notation) : my_name
- Upper Case Format(시스템, 전역변수 사용) : MY_PROJECT_USER_NAME





생성자 method
-클래스를 사용하여 객체 성넌 수 인스턴스화 할때 호출하는 method
-생성자 method는 return type(void, int, String 등)이 없다.
-클래스 이름과 같다(첫글자 대문자)
-클래스를 선언하면 "기본 생성자"는 자동으로 선언된다.
-"임의 생성자"를 선언하면 기본 생성자를 선언해 주어야한다.
-생성자에서는 인스턴스 변수(클래스 영역의 변수)를 초기화하는 코드가 포함된다.



Module이란
-모듈화를 통해 분리된 시스뎀의 기능들로, 서브루틴, 서브시스템, 함수, method등을 말한다.
Module의 결합도
-모듈간에 상호 의존하는 정도 또는 두 모듈 사이의 연관관계
Module의 응집도
-정보 은닉 개념을 확장한 것으로, 명령이나 호출문 등 모듈 내부의 요소들의 서로 관련되어 있는 정도
-모듈이 독릭적인 기능으로 정의되어 있는 정도를 의미
잘 설계된 Module은?
-결합도는 낮고, 응집도는 높아야한다.


객체지향이란
-컴퓨터 프로그래밍 패러다임의 한가지
-컴퓨터 목록을 명령어의 목록으로 보는 시각에서 탈피
-프로그래밍에서 필요한 '데이터를 추상화'하고,
상태(데이터)와, 행위(메소드)를 가진 '객체'를 생성하고,
객처들같의 유기적인 상호작용을 통해 문제를 해결하는 프로그래밍 방법
-객체들 간에는 '메시지'를 주고 받으며 '데이터'를 처리
-유지보수를 쉽게하여 '소프트웨어의 위기'를 벗어나는 한가지 방법으로 인식
-"추상화","상속,"정보의 은닉과 캡슐화'',"다형성"등이 있다.


file에서 기억장치로, 키보드에서 기억장치로
기억장치에서 -console로 데이터가 이동하는 것을 스트리밍이라고 한다.
이동하는 데이터를 스트림 데이터라고 한다. Stream Data
System.in과 System.out은 스트림 클래스이당.
inputstream   outputstream


객체지향 장,단점
코드재사용 용이
-이미 잘 만들어진 클래스를 사용할 수 있고 상속을 받아 확장하여 사용할 수 있다
유지보수가 쉽다
-정차 지향(구조적) 프로그래밍에 비해 수정해야할 부분을 쉽게 찾고 변결 할 수 있다.
대형 프로젝트에 적합하다
-클래스 단위로 모듈화가 쉽기 때문에 협업과 업무 분담이 쉽다.
단점
-처리속도가 절차지향보다 상대적으로 늦다.
-객체가 많아 지면 용량이 커질 수 있다.
-추상화 등의 객체를 설계하는데 많은 시간과 노력이 필요하다.
설계를 잘 하지 못하면 절차지향보다 프로젝트를 성공하기가 어렵다.




interface를 사용한 class 다형성 구조
-java의 interface 
-클래스를 정의하기 위한 설계로 역할을 수행하는 특별한 class
-interface를 impliments(상속)한 클래스는 interface에 정의된 모든 method를 선언해야한다.
-interface를 사용한 객체의 다형성
-interface는 impliment한 클래스들의 부모이다.
-interface로 객체를 선언하고, impliment한 클래스의 생성자로 인스턴스를 생성한다.
-업그레디으된 클래스를 사용하고자 하면 생성자만 교체하면 다른 코드는 그대로 사용가능하다.

객체지향의 다형성
매개변수의 타입이 틀리면 같은 메서드의 이름을 사용할 수 있다.
부모클래스를 이용해서 객체를 선언하고 자신의 생성자로 초기화를 시킨다.
클래스간의 객체구조를 만들어 가는것.

interface도 클래스의 한 종류.
method들이 이름만 있는것은 추상메서드(일종의 설계도)

MVC패턴( Model view Controller)패턴
-사용자가 컴퓨터를 통해 Request를 하면 그 Model을 통해 데이터를 가져오고
-그 정보를 바탕으로 View에서 UI(시각정 표현)을 수행한다.
-Model View Comtroller는 코드가 변경되더라도 상호간에 최소한의 영향만으로 프로젝트가 구현되어야한다.
-View는 사용자와 상호작용하며 Controller는 데이터와 비즈니스 로직을 담당한다.


//Scanner 클래스를 사용하여 객체생성
Scanner scan = new Scanner(System.in);

//Random 클래스를 사용하여 random 객체생성
Random random = new Random();

//String 클래스를 사용하여 문자열형 객체생성
//String string = new String();

//System.in 객체를 사용하여 is 객체 생성
InputStream is = System.in;

//System.out 객체를 사용하여 os 객체 생성
OutputStream os = System.out;



DBMS( DataBase Managiment System)
-많은 데이터를 스토리지에 보관관리하느 소프트웨어
-스토리지에 보관된 많은 데이터 중에서 원하는 조건의 데이터를 쉽게 조회할 수 있게 구성된 소프트 웨어

RDBMS ( Relationship DataBase Managiment System)
-관계형 데이터베이스 시스템
-많은 데이터를 관리하는 데이터베이스 소프트웨어 중 
모든 데이터를 "테이블"이라는 관점으로 보여주는 시스템
-SQL(Structed Query Lang.) 명령어를 사용하여 데이터를 관리



SQL(Structed Query Lang.)
-RDBMS에 접근하기 위한 데이터베이스 코딩 언어
-DDL, DML, DCL, TCL 등이 있다.

DDL(Data Definition Lang.)데이터 정의어
-데이터 저장소, Table, 사용자, 인덱스 등 데이터베이스 객체(Object) 생성, 제거, 변경
-CREATE: 생성, DROP: 제거, ALTER: 변경

DML(Data Manipulation Lang.) 데이터 조작어
-생성된 데이터 table을 기준으로 CRUD 실행
-INSERT(create, 추가), SELECT(React, 조회), UPDATE(Update, 변경), DELETE(delete, 삭제)

DCL(Data Control Lang.)데이터 제어어
-데이터베이스의 접근권한 등을 설정
-GRANT: 권한 부여, REVOKE: 권한 회수



인터페이스
-팀 프로젝트에서 코드 규약을 정의한다.
-여러 구현체에서 사용하는 공통적인 부분을 추상화 한다. = 클래스의 다형성
-객체간의 "연결, 소통"을 돕는 중간 역할을 한다.
-메서드의 프로토 타입만 정의한다.
-메서드애 구체적인 코드가 없다.
-인터페이스를 상속(Implements)하는 구현체 클래스는 인터페이스에 정의된 모든 메서드를 반드시 구현해야한다.
-클래스의 다형성을 가능하게 하여 고크간 결합도를 낮출수 있다.


jdbc는 자바와 데이터베이스를 연결시켜주는 도구이다.

ojdbc - 오라클 데이터베이스랑 연결해주는 도구 

	<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc8</artifactId>
			<version>21.5.0.0</version>
		</dependency



Data 추상화 : 사용할 Data중 필요한 항목이 무엇인지 파악한다
VO(Value Object)클래스 작성: 추상화 된 데이터를 기준으로 VO 클래스를 작성한다.
Service 클래스 작성
-Data 생성 method
-생성된 Data 확인 method
-생성된 Data에 대한 연산 method
Controller 클래스 작성
-main() method를 작성하고 service 클래스와 연결
-Data 생성, Data확인, 연산후 Data확인, 최종 결과 출력확인



maven 리파지토리에서 추가하기
-원하는 것 검색후 최신버전의 jar 파일 다운
-이클립스 - bulid Path - Configuer Build path -Libraries - ClassPath - Add External JARs 로 추가하
-lombok, - ojdbc8 추가했음
-이클립스 폴더 - eclips.ini에
-javaagent: C:\Users\KS5052\Downloads\dvTools\eclipse\lombok.jar  이거 추가



한글 엔코딩 필터 -스프링에서 데이터를 POST로 전송하는 경우 한글이 깨져서 엔코딩을 따로해줘야함
web.xml 에다가

<filter>
		<filter-name>encKor</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encKor</filter-name>
		<url-pattern>*</url-pattern>
	</filter-mapping>


bean - 스프링에서 클래스를 객체상태로 만들어놓은 상태

<!-- 주석문 안에 꺽쇠를 입력하면 오류가 나용  -->



프레임워크
-이미 프로그래밍할 규칙이 정해져 있는 클래스, 모듈을 활용하여 규칙에 맞도록 개발자의
아이디어를 구현하는데 도움을 주는 도구이다.


-본인만의 라이브러리 만들기
만들기 -프로젝트- Export - JAVA: jar file - 경로설정
사용하기- Build Path - Configure Build Path - ClassPath - Add External JARs
같은 패키지 이름이 중복되면 충돌되니까 유의하자



HTTP에서 데이터를 보내는 방식(Request Method)
GET method
-GET은 서버로부터 정보를 조회하기 위해 설계되어 있다.
-URL 주소에 쿼리 스트링(?변수=값&변수=값) 형식으로 전송한다.
GET은 요청을 전송할 때 필요한 데이터를 Body에 담지 않고, 쿼리 스트링을 통해 전송한다.
-단순한 값을 전송할때 사용한다.
-모든 데이터가 노출되어 보안에 취약하다. 민감정보는 절대 담아서는 안된다.
-전체 길이는 255자를 넘지 못한다.
POST method
-POST는 리소스를 생성/변경하기 위해 설계되었다.
-HTTP 프로토콜의 Body에 데이터를 실어서 전송한다.
-보통 form tag로 둘러 쌓인 input tag에 입력된 값을 전송 할때 사용한다.
-전송하는 데이터가 표면상으로는 노출되지 않는다.
-전송하는 데이터의 크기에 제한이 없다. 그림 파일등도 전송 할 수 있다.
-전송하는 데이터를 암호화하여 전송하기 용이하다.


롬복 사용하는법
cmd에서 lombok.jar 추가하기


PRIMARY KEY
-기본키 PK를 성정하여 데이터 조작에 유일한 절대성을 부여하는 것
-한 레코드의 데이터를 수정, 삭제하여도 다른 레코드에 영향을 미치지 않는다. = 무결성 유지
-기본키의 값은 유일(UNIQUE)해야 하며 NOT NULL 성질을 갖는다.
-자동으로 Unique Index가 설정된다.
-한개의 Table에 1개만 존재한다.



객체치향 SOLID 원칙
단일책임원칙(SRP, single Responsibility Principle)
-한 클래스는 한ㅐ의 책임만 주어져야 한다.
-한 클르새를 변경했을때 애플리케이션 전반에 수정이 최소화 되도록 하는 원칙
개방-폐쇠 원픽(OCP, Open-Close Principle)
-서로 관련된 기능과 특성을 한곳에 모으고 분류하여 재활용이하게 하는 것
-경합도는 낮추고 응집도는 높여라
리스코프 치환 원칙(LSP, Lisov Substitution Principle)
-객체는 하위 프로그램의 정확성을 깨지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
-하위 클래스는 인터페이스 규약을 지켜서 작성해야 한다.(다형성을 지원하기 위한 원칙)
인터페이스 분리원칙(ISP, Interface Segration Principle)
-범용(준비된) 인터페이스 하나, 둘 보다는 특정 클라이언트르 위한 여러개의 인터페이스 분리가 좋다
외존관계 역전 원칙(DIP, Dependency Inversion Principle)
-구체화가 아니라 추상화에 의존해야한다.
-구현 클래스(구현체)가 아니라 인터페이스(역할)에 의존하며 작성해야한다.



개발 밥법론(결함 검토, 산출물 검토)
-워크 쓰루
-개발 산출물 작성하는 중에 산출물을 검토하고 결함을 찾아내는 기법
주로 작성자의 요청에 의해 이루어지며, 중간 산출물을 대상으로 한다
-후속 작업에 대한 검사가 생각될 수 있다.
-인스펙션에 비해 비형식적인 동료 검토 방법이다.

-인스펙션
-작성자 외의 다른 전문가가 검사하는 가장 공식적인 리뷰 기법
-문서화된 절차를 기반으로 소프트웨어 명세를 만족하는지 검증
-코딩전까지는 ㅅ소요인력 2배이상 필요하나 추우 인력감소로 인해
결과적으로 품질 비용이 감소하고 개발기간이 단축된다.
-인스펙션 구성원 중 경영자는 제외(표면적 오류만 찾아내려는 경향 발생)


UI 테스트 기법 -휴리스틱 평가(Heuristic Evaluation)
1. 사용성에 대한 문제를 찾아내기 위한 사용성 공학 방법으로 전문가에 의해
이론과 경험을 근거로 하여 '일련의 규칙들'을 만들어 놓고 평가 대상이
그러한 규칙들을 얼마나 잘 지키고 있는가를 확인하는 평가 방법이다.
목적 -디자인 전문가들이 사용성 원칙 또는 휴리스틱 가이드 라인에 비추어
평가하려는 대상의 문제점을 발견하고 디자인에 반영하는 방법
절차
1. 평가계획을 구립 및 평가 시행
2. 발견된 이슈를 취합하고, 개선방향을 논의
3. 평가 결과를 정리하여 평가 보고서를 작성

movie.callor.com

callor88@naver.com
!aa1234


동기와 비동기 방식

동기 - 서비스가 처리 완료 될때까지 한 서비스만 제공함
비동기 - 서비스가 처리 완료될 동안 다른 서비스를 처리 가능


Spring Container
1.Container는 Spring의 핵심이다
Container는 개발자를 대신하여, Bean을 생성 / 관리 / 제거한다
2. Container가 Bean을 관리해주기 때문에,
개발자는 모듈간에 의존 및 결합으로 인해 발생하는 문제로부터 자유로워진다.
3. 독립적인 코드를 작성해서 Annotion만 남겨주면 Container가
개발자가 원하는 상황에 코드를 실행한다.
4. 개발자는 메서드가 언제, 어디서 호출되어야 하는지 그리고 메서드를
호출하기 위해 필요한 매개변수를 준비해서 전달하지 않는다.
Container가 개발자 대신 알아서 호출한다.
5. 개발자가 Container개념, 즉 Spring framwork의 설계를 이해해야하는 이유는
Container가 겉으로 드러나지 않기 때문에 처음 Spring을 접하면
작동원리를 이해하기 어렵다.


Servlet Container
1.웹 서버와 통신하기 위하여 소켓을 생성하고, 특정 포트에 리스닝하고,
스드림을 생성하는 등의 복잡한 일들을 할 필요가 없게 해준다.
2.servlet의 생성부터 소멸까지 일련의 과정(Lifer Cycle)을 관리한다.
3.대표적인 Servlet Container -Tomcat이 있다.

Spring Container
1.자바 객체를 담고 있다.
2.언제든지 스프링 컨테이너로 부터 필요한 객체를 가져와 사용할 수 있다.
3.Bean들의 생명주기를 관리 한다
4.Spring Container는 어플리케이션을 구성하는 Bean들을 관리하기 위해 loc를 사용한다.


관계형데이터베이스(RDBMS)
1. 기본 구성이 Table
2. 키(KEY)와 값(VALUE)들의 간단한 관계를 테이블화 시킨 매우 간단한 원칙의 데이터베이스
각 Table은 Key, Value 쌍으로 데이터 표현
3. 데이터 간의 종속성을 Relation Ship으로 표현
4. 데이터의 완전한 무결성이 보장되어야 하는 곳에서 주로 사용
5. 오라클, MySQL, CUBRID, MSSQL, Postgress 등이 있다.

NoSQL
1. 테이블 혁싱 스키마를 사용하지 않는다.
2. 데이터의 속성, Type이 변화 되었을때 변화에 빠른대응이 가능하고, 확장이 용이하다.
3. 대량의 데이터를 수집하고, 분석하는 곳에서 주로사용한다.
4. 다만 데이터의 일관성을 항상 보증받을 수 없다.
5. mongoDB, 하둡(hadoop) 등이 있다.


Transaction
-정의 : 한가지 업무를 수행하는데 다수의 데이터 조작(CRUD)가 필요한 경우 이를 논리적인 단위로 묶은것
-성질
Atomic 원자성 : 트랜잭션이 모두 완료되어 commit되던지 rollback all되어 모두 반영되지 않아야한다.
Consistency 일관성 : 트랜잭션이 성공하면 데이터 일관성이 보장되어야 한다.
Isolation 독립성 : 트랜잭션이 완료되기 전에는 다른 트랜잭션에 참조 할 수 없다.
Durability 영속성 : 성공한 트랜잭션의 결과는 시스템이 고장 나더라도 유지 되어야 한다.
-Commit : 트랜잭션이 모두 성공했을 때 로컬 스토리지의 물리적 데이터를 갱신하는 것, 실질적으로 데이터를 저장
-Rollback : 트랜잭션이 중간에 실패했을때 처음 상태로 되돌리는 것, DB 연결사항을 원점으로 복귀

트랜잭션 병행처리의 문제
-갱신 내용 손실: 하나의데이터가 동시에 갱신될때 갱신이 누락되는 문제
- 현황 파악 오류: 데이터의 갱신이 완료되지 않았는데 다른 트랜잭션이 데이터를 조회하는 문제
- 모순성 : 데이터의 일관성이 깨져 모순된 상태로 남는 문제
- 연쇄 복귀 : 두 트랜잭션 중 한 곳에서 롤백이 되면, 다른 트랜잭션도 롤백되는 문제
병행처리 문제 방지
-로깅 제어 기법을 사용한다.
- 트랜잭션이 시작할 때 필요한 데이터들 모두 Lock을 걸고 시작하는것
- 공유 로깅: 읽기만 허용하는 Lock
- 베타로깅 : 읽기, 쓰기 모두 금지하는 Lock



javaScript fetch 함수 비동기 방식으로 진행
fetch("http://example.com/user/info")
.then(response=>response.json())
.then(result=>console.log(result))
1. WebAPI인 fetch함수를 사용하여 example.com 서버에 user 정보(info)를 요청한다.
2.Event loop에 의해 fetch함수 1번 response=>response.json() 함수와
	2번 result=>console.log(result)함수의 코드가 call stack에 push된다.
3.fetch 함수는 오류가 없으면 즉시 종료되고 call stack에서 제거된다.
4.서버에서 응답이 오면 1번 함수가 실행되고 response 결과에서 
	json데이터를 추출한 후 return한다. 1번 함수 코드도 call stack에서 제거된다.
5.return된 결과를 2번 함수코드에서 console에 출력한 후 2번 함수도 call stack에서 제거된다.

javaScript fetch 함수 동기 방식 실행
const response = await fetch("http://example.com/user/info")
const result = swait response.json()
console.log(result)
1.ES5 이상에서는 Promise를 사용하여 동기적으로 실행이 가능하다
2.비동기 Call back을 사용하지 않고, async, await 조합으로 동기 실행이 가능하다


비동기 실행과 메모리
Heap
-자바스크립트의 엔진은 Memory heap과 Call stack을 가지고 있다.
-Memory heap에서는 객체나 변수들이 저장된다
-Call stack에서는 코드가 실행되고 함수가 쌓인다.
-Event loop+ Callback Queue(큐)는 비동기 처리를 하는 부분이다
-자바스크립트는 브라우저와 함께 돌아가기 때문에 
web에서 제공하는 API들과 함께 실행된다.